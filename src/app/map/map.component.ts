import { AfterViewInit, Component, OnDestroy, OnInit } from '@angular/core';
import { environment } from 'src/environments/environment';
import { ExchangeService } from '../exchange.service';
import { Subscription } from 'rxjs';
/* Map Imports */
import { Deck, MapView, _GlobeView as GlobeView, COORDINATE_SYSTEM, PostProcessEffect } from '@deck.gl/core';
import { TileLayer } from '@deck.gl/geo-layers';
import { BitmapLayer, SolidPolygonLayer, PolygonLayer, PathLayer, GeoJsonLayer } from '@deck.gl/layers';
import { wktToGeoJSON } from '@terraformer/wkt';

let deck: any;
let mapStyle: string = 'globe';

@Component({
  selector: 'app-map',
  templateUrl: './map.component.html',
  styleUrls: ['./map.component.scss']
})
export class MapComponent implements OnInit, OnDestroy, AfterViewInit {

  productList: object = {};
  mapStyleSubscription!: Subscription;
  showLabelsSubscription!: Subscription;
  productListSubscription!: Subscription;

  public footprintSource: any;

  constructor(private exchangeService: ExchangeService) {
  }

  ngOnInit(): void {
    this.initMap(mapStyle);
  }

  ngAfterViewInit(): void {
    this.mapStyleSubscription = this.exchangeService.selectedMapStyle.subscribe((value) => {
      if (typeof(value) === 'string') {
        mapStyle = value;
        this.initMap(mapStyle);
      }
    });
    this.showLabelsSubscription = this.exchangeService.selectedShowLabels.subscribe((value) => {
      if (typeof(value) === 'boolean') {
        this.changeMapDetails(value);
      }
    });
    this.productListSubscription = this.exchangeService.productListExchange.subscribe((value) => {
      if (typeof(value) === 'object') {
        this.productList = value;
        this.setProductList(this.productList);
      }
    });
  }

  ngOnDestroy(): void {
    this.mapStyleSubscription.unsubscribe();
    this.showLabelsSubscription.unsubscribe();
    this.productListSubscription.unsubscribe();
  }

  initMap(style: string) {
    document.getElementById('map')!.innerHTML = "";
    deck = new Deck({
      parameters: {
        cull: true
      },
      //effects: [new PostProcessEffect('graphic')],
      views: (style === 'globe') ? new GlobeView({
        id: 'globe',
        resolution: 1,
        nearZMultiplier: 1.4, // 1.4 max near limit
        farZMultiplier: 2.0, // use 2.0
        controller: {keyboard: false, inertia: true},
      }) : new MapView({
        id: 'plane',
        controller: true,
        repeat: false,
        orthographic: false,
        bearing: 0,
        pitch: 0
      }),
      initialViewState: {
        longitude: 2.27,
        latitude: 38.86,
        zoom: 1.5,
        minZoom: 1,
        maxZoom: 10
      },
      canvas: <HTMLCanvasElement>document.getElementById('map'),
      layers: [
        /* Inner hemispheres to fill the poles */
        /* (style === 'globe') ? new SolidPolygonLayer({
          id: 'north-background',
          data: [
            [[-180, 90], [0, 90], [180, 90], [180, 0], [0, 0], [-180, 0]]
          ],
          getPolygon: (d: any) => d,
          stroked: false,
          filled: true,
          getFillColor: [170, 211, 223],
          getPolygonOffset: (z: any) => {
            return [5000, 0]
          }
        }) : null,
        (style === 'globe') ? new SolidPolygonLayer({
          id: 'south-background',
          data: [
            [[-180, -90], [0, -90], [180, -90], [180, 0], [0, 0], [-180, 0]]
          ],
          getPolygon: (d: any) => d,
          stroked: false,
          filled: true,
          getFillColor: [242, 239, 233],
          getPolygonOffset: (z: any) => {
            return [5000, 0]
          }
        }) : null, */

        /* Base Map Layer */
        new TileLayer({
          //data: 'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',
          //data: 'https://tiles.maps.eox.at/wms?bbox={bbox-epsg-3857}&format=image/png&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&transparent=true&width=256&height=256&layers=terrain-light_3857',
          //data: 'https://d.tiles.maps.eox.at/wmts/1.0.0/overlay_base/default/WGS84/{z}/{y}/{x}.png',
          //data: 'https://d.tiles.maps.eox.at/wmts/1.0.0/terrain-light/default/WGS84/{z}/{y}/{x}.png',
          //data: 'https://d.tiles.maps.eox.at/wmts/1.0.0/terrain-light/default/WGS84/{z}/{y}/{x}.png',
          //data: 'https://tiles.maps.eox.at/wmts/1.0.0/terrain-light_3857/default/g/{z}/{y}/{x}.jpg',
          data: 'https://tiles.maps.eox.at/wmts/1.0.0/terrain_3857/default/g/{z}/{y}/{x}.jpg',
          //data: 'https://tiles.maps.eox.at/wmts/1.0.0/blackmarble_3857/default/g/{z}/{y}/{x}.jpg',
          //data: 'https://tiles.maps.eox.at/wmts/1.0.0/terrain_3857/default/g/{z}/{y}/{x}.jpg',
          //data: 'https://tiles.maps.eox.at/wmts/1.0.0/bluemarble_3857/default/g/{z}/{y}/{x}.jpg',
          minZoom: 0,
          maxZoom: 14,
          tileSize: 256,

          renderSubLayers: (props: any) => {
            const {
              bbox: {west, south, east, north}
            } = props.tile;

            return new BitmapLayer(props, {
              data: null,
              image: props.data,
              _imageCoordinateSystem: COORDINATE_SYSTEM.CARTESIAN,
              bounds: [west, south, east, north]
            });
          },
          getPolygonOffset: (z: any) => {
            return [500, 5]
          },
        }),

        /* Footprint geojson layer */
        new GeoJsonLayer({
          id: 'geojson-layer',
          data: this.getGeojsonFromWKT(),
          pickable: true,
          stroked: true,
          filled: true,
          extruded: false,
          lineWidthMinPixels: 1,
          lineWidthMaxPixels: 1,
          getLineWidth: 1,
          getFillColor: (d: any) => this.rgbConvertToArray(d.properties.Color),
          getLineColor: [0, 0, 0],
          autoHighlight: true,
          highlightColor: [255, 255, 255, 50],
          onClick: (d: any) => {
            if (d) {
              console.log("Selected footprint name: " + d.object.properties.name);
            }
          },
          getPolygonOffset: (d: any) => {
            return [-5000, 1]
          },
        })
      ],
      getTooltip: ({object}:any) => {
        if (object != undefined) {
        }
      }
    });
  }

  changeMapDetails(showLabels: boolean) {
    if (showLabels) {
    } else {
    }
  }

  setProductList(productList: any) {
    if (this.footprintSource && productList.products) {
      //console.log(JSON.stringify(productList.products[0].geoJson, null, 2));
      this.footprintSource.setData(
        {
          "type": "FeatureCollection",
          "features": [
            productList.products[0].geoJson,
            productList.products[1].geoJson
          ]
        },
      );
    }
  }

  onButtonClick() {
    if (mapStyle === 'globe') {
      mapStyle = 'plane';
      deck.finalize();
      this.initMap(mapStyle);
    } else {
      mapStyle = 'globe';
      deck.finalize();
      this.initMap(mapStyle);
    }
  }

  getGeojsonFromWKT() {
    let footprint = "geography'SRID=4326;MultiPolygon(((-180 -85.05115, -60 -85.05115, -9.873752278028588 -85.05115, -18.697664 -84.41709, -27.291122 -83.34023, -33.327984 -82.15083, -37.678593 -80.89267, -40.903652 -79.59064, -43.35432 -78.25922, -45.256004 -76.90715, -46.758476 -75.54035, -47.962128 -74.16252, -48.936485 -72.77616, -49.731937 -71.38313, -50.38452 -69.98459, -50.920895 -68.58155, -51.36377 -67.17483, -51.40293 -67.03405, -52.28085 -67.1301, -58.67725 -67.66229, -64.64138 -67.89724, -68.03048 -67.914696, -71.67086 -67.83196, -73.95211 -67.72172, -76.583626 -67.53314, -78.33401 -67.36823, -80.456985 -67.12233, -81.93471 -66.91933, -83.80223 -66.6225, -85.15374 -66.37757, -86.92625 -66.01473, -88.256584 -65.70879, -90.06633 -65.24191, -91.47698 -64.83389, -93.47643 -64.183136, -95.10825 -63.583958, -97.55461 -62.561375, -99.69816 -61.533566, -103.27202 -59.520912, -104.76791 -58.558292, -106.7818 -59.64927, -108.93288 -60.7056, -111.231964 -61.722694, -113.68868 -62.69657, -116.312965 -63.622025, -119.112236 -64.49451, -122.09346 -65.307976, -125.260574 -66.05645, -128.61363 -66.73372, -132.1478 -67.33334, -135.85335 -67.84922, -139.71408 -68.27519, -143.70673 -68.605896, -147.80177 -68.83713, -151.96474 -68.96529, -156.15695 -68.98871, -160.338 -68.90681, -164.46829 -68.72086, -168.5109 -68.4337, -172.43407 -68.04902, -176.21161 -67.572075, -179.82462 -67.008575, -180 -66.97568745281865, -180 -85.05115)), ((59.978078453683715 -85.05115, 60 -85.05115, 180 -85.05115, 180 -66.97568745281862, 176.74023 -66.36441, 173.48944 -65.64631, 170.4247 -64.860374, 167.5449 -64.01241, 164.84296 -63.1089, 162.31201 -62.15502, 159.94377 -61.1554, 157.72752 -60.114914, 155.65385 -59.0375, 153.71202 -57.926975, 151.8929 -56.78649, 150.1863 -55.619274, 148.58449 -54.42749, 147.07875 -53.213707, 145.66074 -51.980274, 144.32428 -50.72868, 143.06284 -49.460613, 141.86986 -48.17781, 140.74072 -46.881256, 139.66994 -45.57228, 138.6534 -44.251965, 137.68661 -42.921158, 136.7659 -41.580814, 135.88834 -40.231686, 135.05026 -38.87442, 134.24951 -37.50955, 133.48267 -36.1379, 132.7479 -34.759747, 132.04297 -33.37569, 131.36601 -31.986122, 130.71481 -30.591515, 130.08818 -29.192053, 129.48448 -27.788172, 128.90224 -26.380163, 128.34015 -24.968393, 127.797066 -23.553137, 127.27201 -22.13447, 126.76364 -20.712671, 126.271355 -19.288063, 125.7943 -17.860857, 125.331406 -16.431063, 124.882256 -14.999018, 124.446 -13.564769, 124.02211 -12.128626, 123.60979 -10.690633, 123.20879 -9.250898, 122.81845 -7.8096156, 122.43829 -6.366855, 122.068016 -4.9228134, 121.70711 -3.4775922, 121.35514 -2.0312994, 121.01194 -0.58393055, 120.67694 0.8643173, 120.35023 2.3132932, 120.0314 3.7630463, 119.72011 5.213316, 119.416084 6.6642365, 119.11933 8.1155205, 118.82946 9.56723, 118.54645 11.019191, 118.27004 12.471412, 118.000206 13.923828, 117.73699 15.376323, 117.48014 16.828913, 117.22933 18.28134, 116.984856 19.733765, 116.746666 21.186062, 116.51456 22.63816, 116.28871 24.09004, 116.06896 25.54163, 115.85555 26.992859, 115.64862 28.443764, 115.44794 29.894255, 115.253914 31.344227, 115.06653 32.793766, 114.8862 34.24279, 114.713104 35.691208, 114.547005 37.13901, 114.3889 38.586246, 114.23899 40.032818, 114.09749 41.478737, 113.96502 42.923893, 113.84206 44.368294, 113.72947 45.811943, 113.62754 47.25479, 113.53778 48.6968, 113.46068 50.137936, 113.39755 51.578247, 113.35012 53.017513, 113.319435 54.45584, 113.30762 55.89312, 113.31707 57.329285, 113.35041 58.764328, 113.410446 60.198162, 113.50119 61.630615, 113.62731 63.061657, 113.79463 64.491035, 114.01004 65.91864, 114.28222 67.34423, 114.622116 68.76742, 115.04445 70.18792, 115.5675 71.60514, 116.21626 73.01839, 117.023834 74.42668, 118.03691 75.82861, 119.32079 77.22237, 120.97311 78.60485, 123.13974 79.971596, 126.05391 81.315285, 130.09726 82.623405, 135.92862 83.87316, 144.69469 85.020615, 145.12698213948613 85.05115, 60 85.05115, 0 85.05115, -56.060095777620695 85.05115, -49.12864 84.66965, -39.34633 83.7838, -34.409233 83.15651, -29.556326 82.37678, -26.715324 81.82748, -23.591007 81.128784, -21.584875 80.62072, -19.209015 79.95135, -17.581352 79.44638, -15.540834 78.75525, -14.0664 78.21274, -12.122249 77.437775, -10.646239 76.80045, -8.602081 75.839745, -6.971276 74.99877, -4.5914636 73.62653, -2.5798376 72.297066, 1.8842249721001883e-16 70.2349053338933, 0.58844405 69.76454, 1.8372046 68.567116, 5.948842 68.77987, 10.121085 68.888565, 14.314721 68.891396, 18.48928 68.78874, 22.605053 68.581795, 26.626188 68.2733, 30.522081 67.86817, 34.26726 67.37107, 37.84446 66.78796, 41.24178 66.125404, 44.453228 65.389496, 47.47825 64.58683, 50.319595 63.723335, 52.983395 62.8048, 55.477493 61.8367, 57.81113 60.82395, 59.994225 59.77103, 62.03683 58.681816, 63.949368 57.56026, 65.74095 56.40916, 67.4214 55.2318, 68.99926 54.030605, 70.48269 52.807873, 71.87913 51.565628, 73.19565 50.30573, 74.43848 49.0297, 75.61371 47.739258, 76.72617 46.435295, 77.78124 45.119316, 78.78297 43.792152, 79.73552 42.454815, 80.64244 41.108116, 81.50715 39.752747, 82.33281 38.38954, 83.12202 37.01899, 83.87726 35.641644, 84.60109 34.258106, 85.29528 32.86878, 85.96217 31.47418, 86.603134 30.074476, 87.22006 28.67026, 87.814255 27.261734, 88.387146 25.84913, 88.940155 24.432997, 89.47414 23.013319, 89.99051 21.590485, 90.49007 20.164734, 90.97366 18.736233, 91.44232 17.305239, 91.8964 15.871675, 92.33709 14.436073, 92.76476 12.998327, 93.18017 11.558766, 93.583786 10.117478, 93.9763 8.674642, 94.35807 7.230345, 94.729355 5.7846384, 95.09084 4.337777, 95.44281 2.8898368, 95.78572 1.4409462, 96.11976 -0.00887641, 96.445305 -1.4594045, 96.76236 -2.9106863, 97.071526 -4.3625445, 97.37287 -5.814838, 97.6667 -7.2675724, 97.95303 -8.720591, 98.232 -10.173911, 98.50411 -11.627272, 98.769066 -13.080772, 99.027115 -14.534309, 99.27834 -15.987841, 99.52276 -17.441135, 99.760574 -18.894215, 99.99151 -20.34718, 100.21577 -21.79981, 100.43345 -23.25192, 100.64414 -24.703695, 100.84813 -26.15499, 101.04495 -27.60581, 101.235085 -29.055925, 101.41761 -30.50546, 101.59271 -31.954296, 101.76026 -33.402454, 101.919754 -34.84979, 102.071175 -36.296288, 102.21379 -37.741943, 102.34743 -39.186695, 102.4718 -40.630463, 102.58598 -42.073257, 102.68918 -43.515118, 102.78145 -44.9558, 102.861404 -46.395306, 102.92763 -47.83374, 102.9802 -49.27088, 103.01681 -50.706776, 103.035866 -52.141453, 103.03687 -53.574593, 103.01651 -55.006363, 102.97275 -56.436577, 102.90323 -57.865135, 102.80401 -59.291946, 102.67132 -60.716896, 102.50024 -62.139755, 102.28576 -63.56042, 102.01893 -64.97858, 101.69209 -66.39395, 101.2938 -67.80623, 100.810455 -69.21483, 100.22323 -70.61916, 99.50885 -72.018394, 98.63521 -73.41142, 97.56149 -74.79679, 96.229065 -76.172226, 94.554085 -77.53482, 92.41731 -78.87998, 89.63829 -80.20078, 85.93993 -81.486015, 80.88356 -82.71711, 73.77727 -83.86179, 63.585403 -84.86226, 59.978078453683715 -85.05115)))'";
    footprint = footprint.toUpperCase();
    const geojson = wktToGeoJSON(footprint.substring(footprint.search('MULTIPOLYGON'), footprint.length-1));
    let geojsonObj = {
      "type": "Feature",
      "geometry": geojson,
      "properties": {
        "name": "S2_ABCDE_176998752525_12345",
        "CreationDate": "2022-10-02",
        "Sensor": "ABCDE",
        "Color": "#ff000050"
      }
    };
    return geojsonObj;
  }
/*
  getGeojsonFromOData() {
    //let footprint: string = "geography'SRID=4326;Polygon((-153.005 -52.7204,-152.635 -51.7012,-152.276 -50.6786,-151.927 -49.6552,-151.588 -48.6309,-151.259 -47.606,-150.937 -46.5804,-150.624 -45.5541,-150.317 -44.5271,-150.018 -43.4996,-149.724 -42.4715,-149.437 -41.4427,-149.155 -40.4134,-148.877 -39.3836,-148.604 -38.3533,-148.336 -37.3225,-148.072 -36.2913,-147.811 -35.2595,-147.554 -34.2272,-147.3 -33.1945,-147.049 -32.1614,-146.801 -31.128,-146.556 -30.0941,-146.313 -29.0599,-146.072 -28.0253,-145.833 -26.9902,-145.596 -25.9549,-145.36 -24.9193,-145.127 -23.8834,-144.895 -22.8473,-144.664 -21.8107,-144.434 -20.7737,-144.205 -19.7364,-143.977 -18.6994,-143.75 -17.6624,-143.523 -16.6248,-143.298 -15.5862,-143.073 -14.5474,-142.848 -13.5091,-142.623 -12.4711,-142.398 -11.4329,-142.173 -10.3942,-141.949 -9.35504,-141.724 -8.31602,-141.5 -7.27693,-141.274 -6.23778,-141.049 -5.19869,-140.822 -4.15953,-140.595 -3.12024,-140.368 -2.08096,-140.139 -1.04164,-139.91 -0.002423,-139.68 1.03668,-139.448 2.07571,-139.216 3.11468,-138.982 4.15365,-138.746 5.1925,-138.509 6.23108,-138.27 7.26955,-138.03 8.30794,-137.787 9.34611,-137.543 10.384,-137.296 11.4217,-137.047 12.4591,-136.796 13.4963,-136.542 14.5331,-136.285 15.5696,-136.025 16.6058,-135.763 17.6416,-135.497 18.6771,-135.227 19.7121,-134.955 20.7467,-134.678 21.7807,-134.397 22.8142,-134.112 23.8473,-133.822 24.8799,-133.528 25.9118,-133.229 26.9431,-132.924 27.9737,-132.614 29.0036,-132.298 30.0328,-131.976 31.0613,-131.648 32.089,-131.312 33.1157,-130.969 34.1414,-130.618 35.1663,-130.259 36.1906,-129.892 37.214,-129.515 38.2358,-129.127 39.2556,-128.729 40.2745,-128.321 41.293,-127.901 42.3101,-127.468 43.3252,-127.021 44.3388,-126.56 45.3507,-126.084 46.3609,-125.591 47.3692,-125.08 48.3754,-124.55 49.3794,-124.008 50.3829,-123.439 51.3833,-122.84 52.3793,-122.218 53.3727,-121.57 54.3638,-120.891 55.351,-120.178 56.3343,-119.431 57.3143,-118.645 58.2895,-117.817 59.2601,-116.944 60.2259,-116.02 61.1859,-115.043 62.1399,-114.006 63.0873,-112.902 64.0272,-111.724 64.9586,-110.466 65.8808,-109.116 66.7922,-107.665 67.6914,-106.104 68.578,-104.422 69.45,-102.602 70.3053,-100.63 71.1415,-98.489 71.9563,-96.1585 72.7461,-93.6241 73.5087,-90.855 74.2372,-87.8439 74.9314,-84.5562 75.5814,-80.9801 76.1828,-77.1055 76.7297,-72.9292 77.215,-68.4603 77.6336,-63.7187 77.9793,-58.7319 78.2385,-53.5653 78.4086,-48.2925 78.4859,-42.9913 78.4692,-37.7453 78.3581,-32.6368 78.1552,-27.7324 77.8653,-23.0842 77.4933,-18.7162 77.0506,-14.6523 76.5403,-10.8876 75.9725,-7.41887 75.3524,-4.23174 74.6864,-1.30784 73.9801,5.1e-15 73.6185248082366,1.37385 73.2387,3.83431 72.4664,6.09398 71.6672,8.17242 70.8446,8.26198 70.8071,9.63492 71.149,10.9919 71.4662,12.3342 71.7609,13.4622 71.997,14.8122 72.2608,16.1958 72.5142,17.6152 72.7572,18.8743 72.9608,20.4166 73.192,22.0579 73.4191,23.8084 73.641,25.4226 73.8232,27.4999 74.0403,29.8182 74.2531,32.0378 74.4307,34.9983 74.6262,38.5075 74.8021,42.7257 74.9379,45.143 74.9797,44.9631 76.0001,44.7784 77.0204,44.5873 78.0405,44.3875 79.0604,44.1781 80.0803,43.9537 81.1001,43.7101 82.1198,43.4385 83.1395,43.1236 84.159,43.028708194618176 84.25115000000006,0 84.05115,-135.95332389875404 84.05115,-136.136 83.8231,-136.483 83.6039,-136.774 82.5844,-137.028 81.5646,-137.26 80.5447,-137.476 79.5247,-137.679 78.5047,-137.874 77.4846,-138.063 76.4642,-138.246 75.4436,-138.424 74.423,-138.598 73.4023,-138.77 72.3814,-138.94 71.3603,-139.108 70.3391,-139.27 69.3175,-139.427 68.2957,-139.583 67.2737,-139.743 66.2516,-139.901 65.2292,-140.065 64.2068,-140.241 63.1845,-140.399 62.1614,-140.502 61.1361,-140.726 60.1153,-140.899 59.0922,-141.06 58.0685,-141.221 57.0445,-141.383 56.0203,-141.545 54.9959,-141.707 53.9711,-141.868 52.946,-142.029 51.9209,-142.193 50.8955,-142.357 49.8697,-142.52 48.8437,-142.684 47.8176,-142.848 46.7911,-143.013 45.7644,-143.179 44.7376,-143.345 43.7098,-143.511 42.6819,-143.679 41.655,-143.85 40.6284,-144.019 39.6003,-144.187 38.5709,-144.357 37.5418,-144.529 36.513,-144.702 35.4844,-144.875 34.4554,-145.049 33.4259,-145.225 32.3963,-145.401 31.3665,-145.578 30.3366,-145.756 29.3066,-145.936 28.2764,-146.117 27.2459,-146.299 26.2153,-146.482 25.1848,-146.667 24.1541,-146.852 23.1233,-147.04 22.0924,-147.228 21.0613,-147.419 20.0302,-147.61 18.9991,-147.804 17.9679,-147.998 16.9368,-148.195 15.9057,-148.393 14.8745,-148.593 13.8435,-148.795 12.8123,-148.999 11.7814,-149.205 10.7504,-149.413 9.71954,-149.623 8.68889,-149.835 7.6584,-150.05 6.62793,-150.267 5.59759,-150.486 4.56762,-150.708 3.53784,-150.932 2.50831,-151.159 1.47904,-151.388 0.44996,-151.621 -0.578815,-151.857 -1.60725,-152.095 -2.63516,-152.337 -3.66273,-152.582 -4.68995,-152.83 -5.71679,-153.082 -6.74314,-153.338 -7.7695,-153.597 -8.79477,-153.861 -9.81844,-154.13 -10.8414,-154.401 -11.8651,-154.676 -12.8893,-154.956 -13.9122,-155.242 -14.9332,-155.533 -15.9531,-155.829 -16.9727,-156.13 -17.992,-156.437 -19.0101,-156.75 -20.0271,-157.069 -21.0431,-157.394 -22.0581,-157.726 -23.0721,-158.065 -24.085,-158.411 -25.0966,-158.765 -26.1069,-159.127 -27.1159,-159.497 -28.1235,-159.876 -29.1297,-160.264 -30.1344,-160.662 -31.1374,-161.07 -32.1388,-161.488 -33.1384,-161.918 -34.1359,-162.36 -35.1316,-162.814 -36.1251,-163.282 -37.1165,-163.763 -38.1057,-164.258 -39.0923,-164.769 -40.0763,-165.297 -41.0575,-165.841 -42.0358,-166.404 -43.0112,-166.986 -43.9832,-167.589 -44.9518,-168.214 -45.9167,-168.862 -46.8777,-169.534 -47.8344,-170.233 -48.7867,-170.263 -48.8271,-168.563 -49.3604,-167.11 -49.788,-165.844 -50.1392,-164.874 -50.3965,-163.84 -50.6585,-162.88 -50.8879,-161.988 -51.0947,-161.274 -51.2618,-160.457 -51.4374,-159.663 -51.6011,-158.891 -51.7542,-158.228 -51.8794,-157.458 -52.0207,-156.682 -52.1573,-156.016 -52.2675,-155.206 -52.3984,-154.357 -52.5289,-153.464 -52.6564,-153.005 -52.7204))'"
    //let footprint: string = "geography'SRID=4326;Polygon((-153.005 -52.7204,-152.635 -51.7012,-152.276 -50.6786,-151.927 -49.6552,-151.588 -48.6309,-151.259 -47.606,-150.937 -46.5804,-150.624 -45.5541,-150.317 -44.5271,-150.018 -43.4996,-149.724 -42.4715,-149.437 -41.4427,-149.155 -40.4134,-148.877 -39.3836,-148.604 -38.3533,-148.336 -37.3225,-148.072 -36.2913,-147.811 -35.2595,-147.554 -34.2272,-147.3 -33.1945,-147.049 -32.1614,-146.801 -31.128,-146.556 -30.0941,-146.313 -29.0599,-146.072 -28.0253,-145.833 -26.9902,-145.596 -25.9549,-145.36 -24.9193,-145.127 -23.8834,-144.895 -22.8473,-144.664 -21.8107,-144.434 -20.7737,-144.205 -19.7364,-143.977 -18.6994,-143.75 -17.6624,-143.523 -16.6248,-143.298 -15.5862,-143.073 -14.5474,-142.848 -13.5091,-142.623 -12.4711,-142.398 -11.4329,-142.173 -10.3942,-141.949 -9.35504,-141.724 -8.31602,-141.5 -7.27693,-141.274 -6.23778,-141.049 -5.19869,-140.822 -4.15953,-140.595 -3.12024,-140.368 -2.08096,-140.139 -1.04164,-139.91 -0.002423,-139.68 1.03668,-139.448 2.07571,-139.216 3.11468,-138.982 4.15365,-138.746 5.1925,-138.509 6.23108,-138.27 7.26955,-138.03 8.30794,-137.787 9.34611,-137.543 10.384,-137.296 11.4217,-137.047 12.4591,-136.796 13.4963,-136.542 14.5331,-136.285 15.5696,-136.025 16.6058,-135.763 17.6416,-135.497 18.6771,-135.227 19.7121,-134.955 20.7467,-134.678 21.7807,-134.397 22.8142,-134.112 23.8473,-133.822 24.8799,-133.528 25.9118,-133.229 26.9431,-132.924 27.9737,-132.614 29.0036,-132.298 30.0328,-131.976 31.0613,-131.648 32.089,-131.312 33.1157,-130.969 34.1414,-130.618 35.1663,-130.259 36.1906,-129.892 37.214,-129.515 38.2358,-129.127 39.2556,-128.729 40.2745,-128.321 41.293,-127.901 42.3101,-127.468 43.3252,-127.021 44.3388,-126.56 45.3507,-126.084 46.3609,-125.591 47.3692,-125.08 48.3754,-124.55 49.3794,-124.008 50.3829,-123.439 51.3833,-122.84 52.3793,-122.218 53.3727,-121.57 54.3638,-120.891 55.351,-120.178 56.3343,-119.431 57.3143,-118.645 58.2895,-117.817 59.2601,-116.944 60.2259,-116.02 61.1859,-115.043 62.1399,-114.006 63.0873,-112.902 64.0272,-111.724 64.9586,-110.466 65.8808,-109.116 66.7922,-107.665 67.6914,-106.104 68.578,-104.422 69.45,-102.602 70.3053,-100.63 71.1415,-98.489 71.9563,-96.1585 72.7461,-93.6241 73.5087,-90.855 74.2372,-87.8439 74.9314,-84.5562 75.5814,-80.9801 76.1828,-77.1055 76.7297,-72.9292 77.215,-68.4603 77.6336,-63.7187 77.9793,-58.7319 78.2385,-53.5653 78.4086,-48.2925 78.4859,-42.9913 78.4692,-37.7453 78.3581,-32.6368 78.1552,-27.7324 77.8653,-23.0842 77.4933,-18.7162 77.0506,-14.6523 76.5403,-10.8876 75.9725,-7.41887 75.3524,-4.23174 74.6864,-1.30784 73.9801,5.1E-15 73.6185248082366,1.37385 73.2387,3.83431 72.4664,6.09398 71.6672,8.17242 70.8446,8.26198 70.8071,9.63492 71.149,10.9919 71.4662,12.3342 71.7609,13.4622 71.997,14.8122 72.2608,16.1958 72.5142,17.6152 72.7572,18.8743 72.9608,20.4166 73.192,22.0579 73.4191,23.8084 73.641,25.4226 73.8232,27.4999 74.0403,29.8182 74.2531,32.0378 74.4307,34.9983 74.6262,38.5075 74.8021,42.7257 74.9379,45.143 74.9797,44.9631 76.0001,44.7784 77.0204,44.5873 78.0405,44.3875 79.0604,44.1781 80.0803,43.9537 81.1001,43.7101 82.1198,43.4385 83.1395,43.1236 84.159,42.787008975868154 85.05115,5.5E-15 85.05115,-135.95332389875404 85.05115,-136.136 84.6231,-136.483 83.6039,-136.774 82.5844,-137.028 81.5646,-137.26 80.5447,-137.476 79.5247,-137.679 78.5047,-137.874 77.4846,-138.063 76.4642,-138.246 75.4436,-138.424 74.423,-138.598 73.4023,-138.77 72.3814,-138.94 71.3603,-139.108 70.3391,-139.27 69.3175,-139.427 68.2957,-139.583 67.2737,-139.743 66.2516,-139.901 65.2292,-140.065 64.2068,-140.241 63.1845,-140.399 62.1614,-140.502 61.1361,-140.726 60.1153,-140.899 59.0922,-141.06 58.0685,-141.221 57.0445,-141.383 56.0203,-141.545 54.9959,-141.707 53.9711,-141.868 52.946,-142.029 51.9209,-142.193 50.8955,-142.357 49.8697,-142.52 48.8437,-142.684 47.8176,-142.848 46.7911,-143.013 45.7644,-143.179 44.7376,-143.345 43.7098,-143.511 42.6819,-143.679 41.655,-143.85 40.6284,-144.019 39.6003,-144.187 38.5709,-144.357 37.5418,-144.529 36.513,-144.702 35.4844,-144.875 34.4554,-145.049 33.4259,-145.225 32.3963,-145.401 31.3665,-145.578 30.3366,-145.756 29.3066,-145.936 28.2764,-146.117 27.2459,-146.299 26.2153,-146.482 25.1848,-146.667 24.1541,-146.852 23.1233,-147.04 22.0924,-147.228 21.0613,-147.419 20.0302,-147.61 18.9991,-147.804 17.9679,-147.998 16.9368,-148.195 15.9057,-148.393 14.8745,-148.593 13.8435,-148.795 12.8123,-148.999 11.7814,-149.205 10.7504,-149.413 9.71954,-149.623 8.68889,-149.835 7.6584,-150.05 6.62793,-150.267 5.59759,-150.486 4.56762,-150.708 3.53784,-150.932 2.50831,-151.159 1.47904,-151.388 0.44996,-151.621 -0.578815,-151.857 -1.60725,-152.095 -2.63516,-152.337 -3.66273,-152.582 -4.68995,-152.83 -5.71679,-153.082 -6.74314,-153.338 -7.7695,-153.597 -8.79477,-153.861 -9.81844,-154.13 -10.8414,-154.401 -11.8651,-154.676 -12.8893,-154.956 -13.9122,-155.242 -14.9332,-155.533 -15.9531,-155.829 -16.9727,-156.13 -17.992,-156.437 -19.0101,-156.75 -20.0271,-157.069 -21.0431,-157.394 -22.0581,-157.726 -23.0721,-158.065 -24.085,-158.411 -25.0966,-158.765 -26.1069,-159.127 -27.1159,-159.497 -28.1235,-159.876 -29.1297,-160.264 -30.1344,-160.662 -31.1374,-161.07 -32.1388,-161.488 -33.1384,-161.918 -34.1359,-162.36 -35.1316,-162.814 -36.1251,-163.282 -37.1165,-163.763 -38.1057,-164.258 -39.0923,-164.769 -40.0763,-165.297 -41.0575,-165.841 -42.0358,-166.404 -43.0112,-166.986 -43.9832,-167.589 -44.9518,-168.214 -45.9167,-168.862 -46.8777,-169.534 -47.8344,-170.233 -48.7867,-170.263 -48.8271,-168.563 -49.3604,-167.11 -49.788,-165.844 -50.1392,-164.874 -50.3965,-163.84 -50.6585,-162.88 -50.8879,-161.988 -51.0947,-161.274 -51.2618,-160.457 -51.4374,-159.663 -51.6011,-158.891 -51.7542,-158.228 -51.8794,-157.458 -52.0207,-156.682 -52.1573,-156.016 -52.2675,-155.206 -52.3984,-154.357 -52.5289,-153.464 -52.6564,-153.005 -52.7204))'"
    //let footprint: string = "geography'SRID=4326;Polygon((0.0 40.0, 0.0 50.0, 20.0 50.0, 20.0 40.0, 15.0 40.0, 15.0 43.0, 5.0 43.0, 5.0 40.0, 0.0 40.0))'";
    //let footprint: string = "geography'SRID=4326;Polygon((0 80, 60 80, 120 80, 180 80, -120 80, -60 80, 0 80))'";
    //let footprint = "geography'SRID=4326;MultiPolygon(((126.301 -83.1322, 134.701 -82.2521, 143.067 -80.9175, 149.264 -79.4472, 153.968 -77.8912, 157.638 -76.2774, 160.579 -74.6248, 162.993 -72.9449, 165.013 -71.2435, 166.737 -69.5268, 168.23 -67.7979, 169.543 -66.0594, 170.711 -64.313, 171.761 -62.5602, 172.714 -60.8018, 173.588 -59.0388, 174.394 -57.2716, 175.144 -55.5011, 175.845 -53.7271, 176.505 -51.9506, 177.129 -50.1713, 177.722 -48.3896, 178.288 -46.6059, 178.831 -44.82, 179.353 -43.0323, 179.856 -41.2428, 180 -40.71430819672128, 180 13.096647999999963, 179.734 11.7345, 179.377 9.94218, 179.015 8.14935, 178.645 6.35917, 178.268 4.56778, 177.884 2.77709, 177.492 0.986908, 177.091 -0.801892, 176.681 -2.58978, 176.262 -4.37742, 175.833 -6.16332, 175.392 -7.94749, 174.941 -9.73065, 174.476 -11.5117, 173.999 -13.2911, 173.508 -15.0688, 173.001 -16.8437, 172.478 -18.6163, 171.937 -20.3858, 171.378 -22.1522, 170.798 -23.9168, 170.197 -25.677, 169.571 -27.433, 168.92 -29.1847, 168.241 -30.9319, 167.531 -32.6747, 166.788 -34.4116, 166.008 -36.1421, 165.189 -37.8663, 164.326 -39.5831, 163.414 -41.2917, 162.45 -42.9915, 161.426 -44.6812, 160.338 -46.3601, 159.176 -48.0265, 157.934 -49.679, 156.6 -51.3163, 155.166 -52.9357, 153.617 -54.5353, 151.939 -56.1123, 150.116 -57.6633, 148.13 -59.1845, 145.957 -60.6715, 143.574 -62.1188, 140.954 -63.5198, 138.066 -64.8669, 134.879 -66.1518, 131.361 -67.3615, 127.478 -68.4865, 123.205 -69.5122, 118.528 -70.4211, 113.445 -71.1982, 107.985 -71.8254, 103.585 -72.1948, 104.098 -72.824, 104.605 -73.4239, 105.149 -74.022, 105.734 -74.6186, 106.365 -75.2133, 107.049 -75.8068, 107.794 -76.4048, 108.601 -76.9917, 109.483 -77.5762, 110.411 -78.1552, 111.475 -78.7335, 112.652 -79.3075, 113.983 -79.8839, 115.446 -80.4472, 117.091 -81.0038, 118.927 -81.546, 121.035 -82.0846, 123.446 -82.6112, 126.301 -83.1322)), ((-180 -40.71430819672128, -179.656 -39.4518, -179.182 -37.6592, -178.721 -35.865, -178.271 -34.0693, -177.831 -32.2726, -177.399 -30.4747, -176.974 -28.6754, -176.556 -26.8752, -176.144 -25.0735, -175.737 -23.2715, -175.333 -21.4684, -174.933 -19.6645, -174.536 -17.8602, -174.141 -16.0543, -173.748 -14.2485, -173.355 -12.4422, -172.963 -10.6352, -172.571 -8.82807, -172.179 -7.02061, -171.785 -5.21259, -171.39 -3.40482, -170.992 -1.59708, -170.593 0.210885, -170.19 2.01856, -169.783 3.82623, -169.371 5.63275, -168.956 7.4397, -168.534 9.24592, -168.107 11.0514, -167.672 12.8562, -167.23 14.6601, -166.78 16.4628, -166.321 18.265, -165.851 20.0658, -165.37 21.8644, -164.877 23.6623, -164.37 25.4584, -163.848 27.2525, -163.31 29.0447, -162.754 30.8345, -162.179 32.622, -161.581 34.4071, -160.96 36.1884, -160.312 37.9672, -159.634 39.7426, -158.923 41.5137, -158.176 43.2805, -157.388 45.0426, -156.553 46.7994, -155.667 48.5501, -154.722 50.2942, -153.71 52.0308, -152.622 53.7588, -151.448 55.4767, -150.173 57.1836, -148.782 58.8781, -147.256 60.5561, -145.572 62.2171, -143.703 63.8566, -141.613 65.4711, -139.261 67.0549, -136.596 68.6014, -138.026 68.9454, -139.497 69.2757, -141.008 69.5923, -142.547 69.8907, -144.149 70.1804, -145.796 70.4554, -147.516 70.7195, -149.25 70.9632, -151.027 71.1903, -152.82 71.4042, -154.673 71.5968, -156.563 71.771, -158.514 71.9283, -160.47 72.0642, -162.453 72.1802, -164.459 72.276, -166.485 72.3512, -168.525 72.4056, -170.54 72.4329, -170.762 70.6578, -170.992 68.8822, -171.229 67.106, -171.47 65.3292, -171.717 63.5517, -171.968 61.7752, -172.222 59.9955, -172.479 58.2159, -172.74 56.4365, -173.003 54.6559, -173.27 52.8745, -173.539 51.0925, -173.81 49.3097, -174.085 47.5262, -174.361 45.742, -174.641 43.9571, -174.924 42.1715, -175.209 40.385, -175.497 38.5979, -175.789 36.8104, -176.083 35.0218, -176.381 33.233, -176.682 31.4437, -176.986 29.6534, -177.295 27.8629, -177.607 26.0718, -177.923 24.2798, -178.243 22.4893, -178.568 20.697, -178.897 18.904, -179.231 17.1118, -179.571 15.3195, -179.916 13.5268, -180 13.09664799999996, -180 -40.71430819672128)))'";
    let footprint = "geography'SRID=4326;MultiPolygon(((-180 -85.05115, -60 -85.05115, -9.873752278028588 -85.05115, -18.697664 -84.41709, -27.291122 -83.34023, -33.327984 -82.15083, -37.678593 -80.89267, -40.903652 -79.59064, -43.35432 -78.25922, -45.256004 -76.90715, -46.758476 -75.54035, -47.962128 -74.16252, -48.936485 -72.77616, -49.731937 -71.38313, -50.38452 -69.98459, -50.920895 -68.58155, -51.36377 -67.17483, -51.40293 -67.03405, -52.28085 -67.1301, -58.67725 -67.66229, -64.64138 -67.89724, -68.03048 -67.914696, -71.67086 -67.83196, -73.95211 -67.72172, -76.583626 -67.53314, -78.33401 -67.36823, -80.456985 -67.12233, -81.93471 -66.91933, -83.80223 -66.6225, -85.15374 -66.37757, -86.92625 -66.01473, -88.256584 -65.70879, -90.06633 -65.24191, -91.47698 -64.83389, -93.47643 -64.183136, -95.10825 -63.583958, -97.55461 -62.561375, -99.69816 -61.533566, -103.27202 -59.520912, -104.76791 -58.558292, -106.7818 -59.64927, -108.93288 -60.7056, -111.231964 -61.722694, -113.68868 -62.69657, -116.312965 -63.622025, -119.112236 -64.49451, -122.09346 -65.307976, -125.260574 -66.05645, -128.61363 -66.73372, -132.1478 -67.33334, -135.85335 -67.84922, -139.71408 -68.27519, -143.70673 -68.605896, -147.80177 -68.83713, -151.96474 -68.96529, -156.15695 -68.98871, -160.338 -68.90681, -164.46829 -68.72086, -168.5109 -68.4337, -172.43407 -68.04902, -176.21161 -67.572075, -179.82462 -67.008575, -180 -66.97568745281865, -180 -85.05115)), ((59.978078453683715 -85.05115, 60 -85.05115, 180 -85.05115, 180 -66.97568745281862, 176.74023 -66.36441, 173.48944 -65.64631, 170.4247 -64.860374, 167.5449 -64.01241, 164.84296 -63.1089, 162.31201 -62.15502, 159.94377 -61.1554, 157.72752 -60.114914, 155.65385 -59.0375, 153.71202 -57.926975, 151.8929 -56.78649, 150.1863 -55.619274, 148.58449 -54.42749, 147.07875 -53.213707, 145.66074 -51.980274, 144.32428 -50.72868, 143.06284 -49.460613, 141.86986 -48.17781, 140.74072 -46.881256, 139.66994 -45.57228, 138.6534 -44.251965, 137.68661 -42.921158, 136.7659 -41.580814, 135.88834 -40.231686, 135.05026 -38.87442, 134.24951 -37.50955, 133.48267 -36.1379, 132.7479 -34.759747, 132.04297 -33.37569, 131.36601 -31.986122, 130.71481 -30.591515, 130.08818 -29.192053, 129.48448 -27.788172, 128.90224 -26.380163, 128.34015 -24.968393, 127.797066 -23.553137, 127.27201 -22.13447, 126.76364 -20.712671, 126.271355 -19.288063, 125.7943 -17.860857, 125.331406 -16.431063, 124.882256 -14.999018, 124.446 -13.564769, 124.02211 -12.128626, 123.60979 -10.690633, 123.20879 -9.250898, 122.81845 -7.8096156, 122.43829 -6.366855, 122.068016 -4.9228134, 121.70711 -3.4775922, 121.35514 -2.0312994, 121.01194 -0.58393055, 120.67694 0.8643173, 120.35023 2.3132932, 120.0314 3.7630463, 119.72011 5.213316, 119.416084 6.6642365, 119.11933 8.1155205, 118.82946 9.56723, 118.54645 11.019191, 118.27004 12.471412, 118.000206 13.923828, 117.73699 15.376323, 117.48014 16.828913, 117.22933 18.28134, 116.984856 19.733765, 116.746666 21.186062, 116.51456 22.63816, 116.28871 24.09004, 116.06896 25.54163, 115.85555 26.992859, 115.64862 28.443764, 115.44794 29.894255, 115.253914 31.344227, 115.06653 32.793766, 114.8862 34.24279, 114.713104 35.691208, 114.547005 37.13901, 114.3889 38.586246, 114.23899 40.032818, 114.09749 41.478737, 113.96502 42.923893, 113.84206 44.368294, 113.72947 45.811943, 113.62754 47.25479, 113.53778 48.6968, 113.46068 50.137936, 113.39755 51.578247, 113.35012 53.017513, 113.319435 54.45584, 113.30762 55.89312, 113.31707 57.329285, 113.35041 58.764328, 113.410446 60.198162, 113.50119 61.630615, 113.62731 63.061657, 113.79463 64.491035, 114.01004 65.91864, 114.28222 67.34423, 114.622116 68.76742, 115.04445 70.18792, 115.5675 71.60514, 116.21626 73.01839, 117.023834 74.42668, 118.03691 75.82861, 119.32079 77.22237, 120.97311 78.60485, 123.13974 79.971596, 126.05391 81.315285, 130.09726 82.623405, 135.92862 83.87316, 144.69469 85.020615, 145.12698213948613 85.05115, 60 85.05115, 0 85.05115, -56.060095777620695 85.05115, -49.12864 84.66965, -39.34633 83.7838, -34.409233 83.15651, -29.556326 82.37678, -26.715324 81.82748, -23.591007 81.128784, -21.584875 80.62072, -19.209015 79.95135, -17.581352 79.44638, -15.540834 78.75525, -14.0664 78.21274, -12.122249 77.437775, -10.646239 76.80045, -8.602081 75.839745, -6.971276 74.99877, -4.5914636 73.62653, -2.5798376 72.297066, 1.8842249721001883e-16 70.2349053338933, 0.58844405 69.76454, 1.8372046 68.567116, 5.948842 68.77987, 10.121085 68.888565, 14.314721 68.891396, 18.48928 68.78874, 22.605053 68.581795, 26.626188 68.2733, 30.522081 67.86817, 34.26726 67.37107, 37.84446 66.78796, 41.24178 66.125404, 44.453228 65.389496, 47.47825 64.58683, 50.319595 63.723335, 52.983395 62.8048, 55.477493 61.8367, 57.81113 60.82395, 59.994225 59.77103, 62.03683 58.681816, 63.949368 57.56026, 65.74095 56.40916, 67.4214 55.2318, 68.99926 54.030605, 70.48269 52.807873, 71.87913 51.565628, 73.19565 50.30573, 74.43848 49.0297, 75.61371 47.739258, 76.72617 46.435295, 77.78124 45.119316, 78.78297 43.792152, 79.73552 42.454815, 80.64244 41.108116, 81.50715 39.752747, 82.33281 38.38954, 83.12202 37.01899, 83.87726 35.641644, 84.60109 34.258106, 85.29528 32.86878, 85.96217 31.47418, 86.603134 30.074476, 87.22006 28.67026, 87.814255 27.261734, 88.387146 25.84913, 88.940155 24.432997, 89.47414 23.013319, 89.99051 21.590485, 90.49007 20.164734, 90.97366 18.736233, 91.44232 17.305239, 91.8964 15.871675, 92.33709 14.436073, 92.76476 12.998327, 93.18017 11.558766, 93.583786 10.117478, 93.9763 8.674642, 94.35807 7.230345, 94.729355 5.7846384, 95.09084 4.337777, 95.44281 2.8898368, 95.78572 1.4409462, 96.11976 -0.00887641, 96.445305 -1.4594045, 96.76236 -2.9106863, 97.071526 -4.3625445, 97.37287 -5.814838, 97.6667 -7.2675724, 97.95303 -8.720591, 98.232 -10.173911, 98.50411 -11.627272, 98.769066 -13.080772, 99.027115 -14.534309, 99.27834 -15.987841, 99.52276 -17.441135, 99.760574 -18.894215, 99.99151 -20.34718, 100.21577 -21.79981, 100.43345 -23.25192, 100.64414 -24.703695, 100.84813 -26.15499, 101.04495 -27.60581, 101.235085 -29.055925, 101.41761 -30.50546, 101.59271 -31.954296, 101.76026 -33.402454, 101.919754 -34.84979, 102.071175 -36.296288, 102.21379 -37.741943, 102.34743 -39.186695, 102.4718 -40.630463, 102.58598 -42.073257, 102.68918 -43.515118, 102.78145 -44.9558, 102.861404 -46.395306, 102.92763 -47.83374, 102.9802 -49.27088, 103.01681 -50.706776, 103.035866 -52.141453, 103.03687 -53.574593, 103.01651 -55.006363, 102.97275 -56.436577, 102.90323 -57.865135, 102.80401 -59.291946, 102.67132 -60.716896, 102.50024 -62.139755, 102.28576 -63.56042, 102.01893 -64.97858, 101.69209 -66.39395, 101.2938 -67.80623, 100.810455 -69.21483, 100.22323 -70.61916, 99.50885 -72.018394, 98.63521 -73.41142, 97.56149 -74.79679, 96.229065 -76.172226, 94.554085 -77.53482, 92.41731 -78.87998, 89.63829 -80.20078, 85.93993 -81.486015, 80.88356 -82.71711, 73.77727 -83.86179, 63.585403 -84.86226, 59.978078453683715 -85.05115)))'";

    footprint = footprint.toLowerCase();
    if (footprint.includes('multipolygon')) {
      let multipolygon: string[] = footprint.substring(footprint.search('multipolygon')+15, footprint.length-4).split(/\)\),\s\(\(|\)\),\(\(/);
      let dataStringArray: string[][] = [];

      let dataArray: number[][][][] = [];
      multipolygon.forEach(item => {
        let tempArray: number[][] = [];
        let tempDataArray: string[] = item.split(/,\s*.......................delete here....................../);
        dataStringArray.push(tempDataArray);
        dataStringArray[dataStringArray.length-1].forEach(str => {
          let coordsArray: number[] = [];
          str.split(/[,\s]\s*.......................delete here....................../).forEach(coord => {
            coordsArray.push(Number(coord));
          });
          tempArray.push(coordsArray);
        });
        dataArray.push([tempArray]);
      });
      let geojsonObj = {
        "type": "Feature",
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [[[[0,0], [0,0]]], [[[0,0], [0,0]]]]
        },
        "properties": {
          "name": "S2_ABCDE_176998752525_12345",
          "CreationDate": "2022-10-02",
          "Sensor": "ABCDE",
          "Color": "#8A2BE2"
        }
      };
      geojsonObj.geometry.coordinates = dataArray;
      //console.log(JSON.stringify(geojsonObj, null, 2));
      return geojsonObj;
    } else if (footprint.includes('polygon')) {
      let geojsonObj = {
        "type": "Feature",
        "geometry": {
          "type": "Polygon",
          "coordinates": [[[0,0], [0,0]]]
        },
        "properties": {
          "name": "S2_ABCDE_176998752525_12345",
          "CreationDate": "2022-10-02",
          "Sensor": "ABCDE",
          "Color": "#8A2BE2"
        }
      };
      let polygon: string = footprint.substring(footprint.search('polygon')+9, footprint.length-3);
      let dataStringArray: string[] = polygon.split(/,\s*.......................delete here....................../);
      let dataArray: number[][][] = [];
      let tempArray: number[][] = [];
      dataStringArray.forEach(str => {
        let coordsArray: number[] = [];
        str.split(/[,\s]\s*.......................delete here....................../).forEach(coord => {
          coordsArray.push(Number(coord));
        });
        tempArray.push(coordsArray);
      });
      dataArray.push(tempArray);
      console.log(dataArray);
      //let reverseArray: number[][][] = dataArray.reverse();
      //geojsonObj.geometry.coordinates = reverseArray;
      geojsonObj.geometry.coordinates = dataArray;
      //console.log(JSON.stringify(geojsonObj, null, 2));
      return geojsonObj;
    } else {
      let geojsonObj = {
        "type": "Feature",
        "geometry": {
          "type": "Polygon",
          "coordinates": [[[]]]
        },
        "properties": {
          "name": "S2_ABCDE_176998752525_12345",
          "CreationDate": "2022-10-02",
          "Sensor": "ABCDE",
          "Color": "#8A2BE2"
        }
      };
      return geojsonObj;
    }
   }
 */


  /* Function to convert [r, g, b] or [r, g, b, a] colors to html string: "#rrggbb" or "#rrggbbaa" */
  rgbConvertToString(col: any) {
    if (typeof(col) == typeof([Number, Number, Number])) {
      let color: string = "#" + col[0].toString(16).padStart(2, '0') + col[1].toString(16).padStart(2, '0') + col[2].toString(16).padStart(2, '0');
      return color;
    } else if (typeof(col) == typeof([Number, Number, Number, Number])) {
      let color: string = "#" + col[0].toString(16).padStart(2, '0') + col[1].toString(16).padStart(2, '0') + col[2].toString(16).padStart(2, '0') + col[3].toString(16).padStart(2, '0');
      return color;
    } else return '#ff0000';
  }

  /* Function to convert #rrggbb or #rrggbbaa colors to array: [r, g, b] or [r, g, b, a] */
  rgbConvertToArray(col: string) {
    if (col.length == 7) {
      if (col.charAt(0) != '#') return [255, 0, 0];
      var r = parseInt(col.substring(1, 3), 16);
      var g = parseInt(col.substring(3, 5), 16);
      var b = parseInt(col.substring(5, 7), 16);
      let color = [r, g, b];
      return color;
    } else if (col.length == 9) {
      if (col.charAt(0) != '#') return [255, 0, 0];
      var r = parseInt(col.substring(1, 3), 16);
      var g = parseInt(col.substring(3, 5), 16);
      var b = parseInt(col.substring(5, 7), 16);
      var a = parseInt(col.substring(7, 9), 16);
      let color = [r, g, b, a];
      return color;
    } else {
      return [255, 100, 100];
    }
  }
}
